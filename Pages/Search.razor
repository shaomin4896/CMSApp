@page "/search"
@using System.Text.Json;
@using CaseManagementAPI.Models;
@inject IJSRuntime JsRuntime
@inject ILocalStorageService _localStorageService;
@inject Service.AuthService _authService;
@inject Service.CaseService _caseService;
@inject INotificationService _notice
@inject LoginState _loginState;
@inject NavigationManager _NavManager;
@using System.ComponentModel;
@using AntDesign.TableModels;
@using Models.ControlItems;
@using Extensions;
@inject ModalService _modalService


<h1 style="text-align: center;">查詢</h1>
<Row>
	<Col Span="3">
	</Col>
	<Col Span="8">
	@* <Input Size="@InputSize.Large" @bind-Value=@queryPayload.CaseId Type="number" Placeholder="請輸入個案編號">
	<AddOnBefore>個案編號</AddOnBefore>
	</Input><br><br> *@
	<Input Size="@InputSize.Large" @bind-Value=@queryPayload.CustomerId Placeholder="請輸入身分證字號">
	<AddOnBefore>身分證字號</AddOnBefore>
	</Input>
	</Col>
	<Col Span="2">
	</Col>
	<Col Span="8">
	<Input Size="@InputSize.Large" @bind-Value=@queryPayload.PatientName Placeholder="請輸入姓名">
	<AddOnBefore>姓名</AddOnBefore>
	</Input><br><br>
	@* 檢驗日期：<DatePicker Size="@DatePickerSize.Large" @bind-Value=@queryPayload.TestDate></DatePicker> *@
	</Col>
	<Col Span="3">
	</Col>
</Row>
<Divider></Divider>
<Row>
	<Col Span="8"></Col>
	<Col Span="8">
		<Button Size="@ButtonSize.Large" OnClick="()=> { queryPayload = new(); }" >清除資料</Button>　
		<Button Type="@ButtonType.Primary" Size="@ButtonSize.Large" OnClick="OnSearchClick">搜尋</Button>
	</Col>
	<Col Span="8"></Col>
</Row>

<Divider></Divider>
<Table @ref="table" ScrollX="2500" TItem="TestRecord" DataSource="@testRecords" Total="_total" @bind-PageIndex="_pageIndex"
@bind-PageSize="_pageSize" OnChange="OnChange">
	<PropertyColumn Title="醫師姓名" Property="t => t.DoctorName"></PropertyColumn>
	<PropertyColumn Title="追蹤日期" Property="t => t.TestDate" Format="yyyy-MM-dd"></PropertyColumn>
	<PropertyColumn Title="身高" Format="#.##" Property="t => t.Height"></PropertyColumn>
	<PropertyColumn Title="體重" Format="#.##" Property="t => t.Weight"></PropertyColumn>
	<PropertyColumn Title="收縮壓" Property="t => t.Systolic"></PropertyColumn>
	<PropertyColumn Title="舒張壓" Property="t => t.Diastolic"></PropertyColumn>
	<PropertyColumn Title="糖化血色素" Property="t => t.HBAIC"></PropertyColumn>
	<PropertyColumn Title="血糖測量值" Property="t => t.BloodSugarBeforeMeal"></PropertyColumn>
	<PropertyColumn Title="三酸甘油脂" Property="t => t.TG"></PropertyColumn>
	<PropertyColumn Title="肌酸酐" Property="t => t.Creatinine"></PropertyColumn>
	<PropertyColumn Title="尿液常規檢查" Field="BoolToIsNormalString(context.DidRoutine)"></PropertyColumn>
	<PropertyColumn Title="低密度脂蛋白" Property="t => t.LDL"></PropertyColumn>
	<PropertyColumn Title="左腳足部" Field="BoolToIsNormalString(context.IsLeftNormal)"></PropertyColumn>
	<PropertyColumn Title="右腳足部" Field="BoolToIsNormalString(context.IsRightNormal)"></PropertyColumn>
	<PropertyColumn Title="眼睛" Field="BoolToIsNormalString(context.IsNormal)"></PropertyColumn>
	<ActionColumn Title="功能選項">
		<Space>
			<SpaceItem><Button OnClick="() => { Trace(context.CmsCase.Id); }">個案追蹤</Button></SpaceItem>
			<SpaceItem><Button OnClick="()=>{ Last(context.CmsCase.Id); }">年度評估</Button></SpaceItem>
			@if(context.HealthHistory != null)
			{
				<SpaceItem><Button OnClick="() => { HealthHistory(context); }">衛教紀錄</Button></SpaceItem>	
			}
		</Space>
	</ActionColumn>
</Table>

<br />
<p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>

@code {
	QueryPayload queryPayload = new();
	List<TestRecord> testRecords = new();
	ITable table;
	bool healthModalVisible = false;
	TestRecord activedTestRecord;

	int _pageIndex = 1;
	int _pageSize = 10;
	int _total = 0;

	protected override async Task OnInitializedAsync()
	{
		
	}

	public async Task OnChange(QueryModel<TestRecord> queryModel)
	{
		Console.WriteLine(JsonSerializer.Serialize(queryModel));
	}

	public string BoolToIsNormalString(bool? b) 
	{
		if (b == null) return "";
		else if (b == true)
			return "正常";
		else
			return "異常";
	}

	public async Task OnSearchClick()
	{
		testRecords.Clear();
		var cases = await _caseService.GetCasesByQueryPayload(queryPayload);
		cases.ForEach(x => testRecords.AddRange(x.ToTestRecords()));
		if (queryPayload.TestDate != null) 
			testRecords = testRecords.Where(x => x.TestDate.Date == queryPayload.TestDate).ToList();
	}

	public void Trace(int caseId)
	{
		_NavManager.NavigateTo($"/trace/{caseId}");
	}

	public void Last(int caseId)
	{
		_NavManager.NavigateTo($"/last/{caseId}");
	}

	public void HealthHistory(TestRecord actived)
	{
		string bitString = "";
		actived.HealthHistory.TraceItem.ForEach(x => bitString += Convert.ToInt32(x).ToString());

		RenderFragment content =
			@<div>
				<h6>選取紀錄</h6>
                <p>@bitString</p>
				<h6>紀錄內容</h6>
                <p>@actived.HealthHistory.Content</p>
            </div>;
        _modalService.Info(new ConfirmOptions()
        {
            Title = "衛教紀錄",
            Content = content
        });
	}
}
